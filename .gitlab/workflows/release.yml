include:
  - local: 'ci/rules.gitlab-ci.yml'

semantic-release:
  stage: release
  image: node:20-buster-slim
  extends: .rules:default_on_success
  variables:
    GIT_STRATEGY: clone # clone entire repo instead of reusing workspace
    GIT_DEPTH: 0 # avoid shallow clone to give cliff all the info it needs
    GITLAB_TOKEN: $GITLAB_API_TOKEN
    GIT_AUTHOR_EMAIL: 'gitlab-bot@fadutec.com'
    GIT_COMMITTER_EMAIL: 'gitlab-bot@fadutec.com'
  before_script:
    - apt-get update && apt-get install -y git
    - npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/gitlab conventional-changelog-conventionalcommits
  script:
    - semantic-release ${TRACE:+--debug} --ci

github-release:
  stage: post
  image: alpine:latest
  extends: .rules:default_on_success
  before_script:
    - apk add --no-cache curl jq
  variables:
    GITHUB_REPO: 'fadu-infra/ci-release-terraform-doc'
    GITHUB_API_URL: 'https://api.github.com'
  script:
    - |
      # 최신 태그 가져오기
      LATEST_TAG="$(curl -s --fail --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags" | jq -r '.[0].name')"
      if [ -z "$LATEST_TAG" ]; then
        echo "Error: Could not fetch latest tag"
        exit 1
      fi
      echo "LATEST_TAG: $LATEST_TAG"

      # GitHub에 릴리스가 존재하는지 확인
      RELEASE_INFO="$(curl -s --fail -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${GITHUB_API_TOKEN}" -H "X-GitHub-Api-Version: 2022-11-28" "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases/tags/${LATEST_TAG}" || echo "")"
      RELEASE_ID="$(echo "$RELEASE_INFO" | jq -r ".id // empty")"

      if [ -n "$RELEASE_ID" ]; then
        echo "GitHub에 이미 태그 ${LATEST_TAG}에 대한 릴리스가 존재합니다. 업데이트를 건너뜁니다."
        exit 0
      fi

      echo "RELEASE_ID: $RELEASE_ID"

      # GitLab 릴리스 정보 가져오기
      GITLAB_RELEASE="$(curl -s --fail --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/${LATEST_TAG}")"
      if [ -z "$GITLAB_RELEASE" ]; then
        echo "Error: Could not fetch GitLab release information"
        exit 1
      fi
      echo "GITLAB_RELEASE: $GITLAB_RELEASE"

      # 릴리스 노트 추출
      RELEASE_NOTES="$(echo "$GITLAB_RELEASE" | jq -r ".description")"
      if [ -z "$RELEASE_NOTES" ]; then
        echo "Warning: Release notes are empty"
      fi

      echo "RELEASE_NOTES: $RELEASE_NOTES"

      # 새로운 릴리스 생성
      jq -n \
        --arg tag "$LATEST_TAG" \
        --arg name "Release ${LATEST_TAG}" \
        --arg body "$RELEASE_NOTES" \
        '{
          tag_name: $tag,
          name: $name,
          body: $body,
          draft: false,
          prerelease: false
        }' > payload.json

      RESPONSE=$(curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer ${GITHUB_API_TOKEN}" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        -H "Content-Type: application/json" \
        --data @payload.json \
        --write-out "\nHTTP_STATUS:%{http_code}" \
        "${GITHUB_API_URL}/repos/${GITHUB_REPO}/releases" 2>&1)

      HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS" | cut -d":" -f2)
      BODY=$(echo "$RESPONSE" | sed '$d')

      if [ "$HTTP_STATUS" != "201" ]; then
        echo "Error: Failed to create GitHub release. Status: ${HTTP_STATUS}"
        echo "Response body: ${BODY}"
        exit 1
      fi

      echo "Successfully created GitHub release"
